1.
I should make GameState classes very modular. For example, I can create separate
objects for checking the answers, or sending certain screens to the clients,
such that I can re-use code for differnt GameState classes that are partially
similar!
For this I can use some pattern where the constructor creates these modules,
and that the constructors of these modules take a reference to the respective
(private) data members as arguments.

2.
Want to make a script that automatically checks all the different types of
question classes, and creates a file that exports all of these, and also has
a Map which has their names as strings as keys, and maps them to the actual
class, such that I can call the right constructor in that manner.

3.
All html templates should be present on the client in the form of <template>
elements. The websocket server should, in each object it receives, also find
an option saying which template should be active and activate this one if it
isnt already. Next, it should emit a CustomEvent which also forwards the
received object. Associated with a template there can then be an event listener
that listens for specifically this event. I.e. the name of the event will be
extracted from the received object also.

procedure:
    a) server sends Object obj.
    b) client function receives obj and does:
        b.1) check if the active page is called, obj.page_name. Else changes it
             to that page.
        b.2) emit a custom event CustomEvent(obj.event_name, {detail: obj})
    c) eventlistener for obj.event_name receives event. Uses data from obj to
       act accordingly.

of course obj.page_name and obj.event_name could be the same, or both be
inferred from some obj.name or something.

4.
The update function should take a specific format as argument:
{
    general: {},
    admin: {},
    bigscreen: {},
    users: {
        user1: {},
        user2: {},
        .
        .
    }
}

where you have these fields containing information that is only relevant for
certain listeners/clients.